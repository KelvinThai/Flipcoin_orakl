/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FlipCoinInterface extends ethers.utils.Interface {
  functions: {
    "claim()": FunctionFragment;
    "flip(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "playerInfors(address)": FunctionFragment;
    "players(address,uint256)": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestInfors(uint256)": FunctionFragment;
    "sAccountId()": FunctionFragment;
    "sKeyHash()": FunctionFragment;
    "setAccountId(uint64)": FunctionFragment;
    "setGasLimit(uint32)": FunctionFragment;
    "setKeyHash(bytes32)": FunctionFragment;
    "setTaxFee(uint256)": FunctionFragment;
    "taxFee()": FunctionFragment;
    "taxFeeMax()": FunctionFragment;
    "totalRemainBalance()": FunctionFragment;
    "totalRequest()": FunctionFragment;
    "totalWinCount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "flip", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerInfors",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestInfors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sAccountId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sKeyHash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAccountId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeyHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "taxFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "taxFeeMax", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalRemainBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWinCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerInfors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestInfors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sAccountId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sKeyHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAccountId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeyHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTaxFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxFeeMax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalRemainBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWinCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Claim(address,uint256)": EventFragment;
    "Flip(address,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Result(address,uint256,uint256,uint256)": EventFragment;
    "SetAccountId(uint64)": EventFragment;
    "SetCoordinator(address,address)": EventFragment;
    "SetTaxFee(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Flip"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Result"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAccountId"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCoordinator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTaxFee"): EventFragment;
}

export class FlipCoin extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FlipCoinInterface;

  functions: {
    claim(overrides?: Overrides): Promise<ContractTransaction>;

    "claim()"(overrides?: Overrides): Promise<ContractTransaction>;

    flip(
      bet: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "flip(uint256)"(
      bet: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    playerInfors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      winCount: BigNumber;
      total: BigNumber;
      balance: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "playerInfors(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      winCount: BigNumber;
      total: BigNumber;
      balance: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    players(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "players(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rawFulfillRandomWords(uint256,uint256[])"(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    requestInfors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      player: string;
      bet: BigNumber;
      betAmount: BigNumber;
      result: BigNumber;
      hasResult: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
    }>;

    "requestInfors(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      player: string;
      bet: BigNumber;
      betAmount: BigNumber;
      result: BigNumber;
      hasResult: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
    }>;

    sAccountId(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "sAccountId()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    sKeyHash(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "sKeyHash()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    setAccountId(
      accId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAccountId(uint64)"(
      accId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGasLimit(
      newGas: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGasLimit(uint32)"(
      newGas: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setKeyHash(
      newHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setKeyHash(bytes32)"(
      newHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTaxFee(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTaxFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    taxFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "taxFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    taxFeeMax(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "taxFeeMax()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalRemainBalance(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalRemainBalance()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalRequest(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalRequest()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalWinCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalWinCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  claim(overrides?: Overrides): Promise<ContractTransaction>;

  "claim()"(overrides?: Overrides): Promise<ContractTransaction>;

  flip(
    bet: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "flip(uint256)"(
    bet: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  playerInfors(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    winCount: BigNumber;
    total: BigNumber;
    balance: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "playerInfors(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    winCount: BigNumber;
    total: BigNumber;
    balance: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  players(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "players(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rawFulfillRandomWords(
    requestId: BigNumberish,
    randomWords: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rawFulfillRandomWords(uint256,uint256[])"(
    requestId: BigNumberish,
    randomWords: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  requestInfors(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    player: string;
    bet: BigNumber;
    betAmount: BigNumber;
    result: BigNumber;
    hasResult: boolean;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: boolean;
  }>;

  "requestInfors(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    player: string;
    bet: BigNumber;
    betAmount: BigNumber;
    result: BigNumber;
    hasResult: boolean;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: boolean;
  }>;

  sAccountId(overrides?: CallOverrides): Promise<BigNumber>;

  "sAccountId()"(overrides?: CallOverrides): Promise<BigNumber>;

  sKeyHash(overrides?: CallOverrides): Promise<string>;

  "sKeyHash()"(overrides?: CallOverrides): Promise<string>;

  setAccountId(
    accId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAccountId(uint64)"(
    accId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGasLimit(
    newGas: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGasLimit(uint32)"(
    newGas: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setKeyHash(
    newHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setKeyHash(bytes32)"(
    newHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTaxFee(
    newFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTaxFee(uint256)"(
    newFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  taxFee(overrides?: CallOverrides): Promise<BigNumber>;

  "taxFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  taxFeeMax(overrides?: CallOverrides): Promise<BigNumber>;

  "taxFeeMax()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalRemainBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "totalRemainBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalRequest(overrides?: CallOverrides): Promise<BigNumber>;

  "totalRequest()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalWinCount(overrides?: CallOverrides): Promise<BigNumber>;

  "totalWinCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(overrides?: CallOverrides): Promise<void>;

    "claim()"(overrides?: CallOverrides): Promise<void>;

    flip(bet: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "flip(uint256)"(
      bet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    playerInfors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      winCount: BigNumber;
      total: BigNumber;
      balance: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "playerInfors(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      winCount: BigNumber;
      total: BigNumber;
      balance: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    players(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "players(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "rawFulfillRandomWords(uint256,uint256[])"(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    requestInfors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      player: string;
      bet: BigNumber;
      betAmount: BigNumber;
      result: BigNumber;
      hasResult: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
    }>;

    "requestInfors(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      player: string;
      bet: BigNumber;
      betAmount: BigNumber;
      result: BigNumber;
      hasResult: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
    }>;

    sAccountId(overrides?: CallOverrides): Promise<BigNumber>;

    "sAccountId()"(overrides?: CallOverrides): Promise<BigNumber>;

    sKeyHash(overrides?: CallOverrides): Promise<string>;

    "sKeyHash()"(overrides?: CallOverrides): Promise<string>;

    setAccountId(accId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setAccountId(uint64)"(
      accId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasLimit(newGas: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setGasLimit(uint32)"(
      newGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeyHash(newHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    "setKeyHash(bytes32)"(
      newHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxFee(newFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setTaxFee(uint256)"(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    taxFee(overrides?: CallOverrides): Promise<BigNumber>;

    "taxFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    taxFeeMax(overrides?: CallOverrides): Promise<BigNumber>;

    "taxFeeMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalRemainBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totalRemainBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalRequest(overrides?: CallOverrides): Promise<BigNumber>;

    "totalRequest()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalWinCount(overrides?: CallOverrides): Promise<BigNumber>;

    "totalWinCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Claim(player: null, amount: null): EventFilter;

    Flip(
      player: null,
      bet: null,
      betAmount: null,
      requestId: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Result(
      player: null,
      requestid: null,
      result: null,
      randomResult: null
    ): EventFilter;

    SetAccountId(accId: null): EventFilter;

    SetCoordinator(setter: null, newCoordinator: null): EventFilter;

    SetTaxFee(setter: null, newFee: null): EventFilter;
  };

  estimateGas: {
    claim(overrides?: Overrides): Promise<BigNumber>;

    "claim()"(overrides?: Overrides): Promise<BigNumber>;

    flip(bet: BigNumberish, overrides?: PayableOverrides): Promise<BigNumber>;

    "flip(uint256)"(
      bet: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    playerInfors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "playerInfors(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    players(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "players(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rawFulfillRandomWords(uint256,uint256[])"(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    requestInfors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requestInfors(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sAccountId(overrides?: CallOverrides): Promise<BigNumber>;

    "sAccountId()"(overrides?: CallOverrides): Promise<BigNumber>;

    sKeyHash(overrides?: CallOverrides): Promise<BigNumber>;

    "sKeyHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAccountId(
      accId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAccountId(uint64)"(
      accId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGasLimit(
      newGas: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGasLimit(uint32)"(
      newGas: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setKeyHash(newHash: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "setKeyHash(bytes32)"(
      newHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTaxFee(newFee: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setTaxFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    taxFee(overrides?: CallOverrides): Promise<BigNumber>;

    "taxFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    taxFeeMax(overrides?: CallOverrides): Promise<BigNumber>;

    "taxFeeMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalRemainBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totalRemainBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalRequest(overrides?: CallOverrides): Promise<BigNumber>;

    "totalRequest()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalWinCount(overrides?: CallOverrides): Promise<BigNumber>;

    "totalWinCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claim()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    flip(
      bet: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "flip(uint256)"(
      bet: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerInfors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "playerInfors(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    players(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "players(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rawFulfillRandomWords(uint256,uint256[])"(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    requestInfors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requestInfors(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sAccountId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sAccountId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sKeyHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sKeyHash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAccountId(
      accId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAccountId(uint64)"(
      accId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGasLimit(
      newGas: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGasLimit(uint32)"(
      newGas: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setKeyHash(
      newHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setKeyHash(bytes32)"(
      newHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTaxFee(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTaxFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    taxFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "taxFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxFeeMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "taxFeeMax()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRemainBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalRemainBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRequest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalRequest()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWinCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalWinCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
